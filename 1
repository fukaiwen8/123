from mrjob.job import MRJob
from mrjob.step import MRStep

class NodeAppearanceCount(MRJob):

    def steps(self):
        """定义 MapReduce 步骤，包括 Combiner 和 Reducer"""
        return [
            MRStep(mapper=self.mapper_count_nodes,
                   combiner=self.combiner_sum_counts,
                   reducer=self.reducer_sum_counts),
            MRStep(reducer=self.reducer_filter_min_3)
        ]

    def mapper_count_nodes(self, _, line):
        """
        Mapper: 读取边 (node1 node2)，输出每个节点及其计数。
        左节点 -> (1, 0)
        右节点 -> (0, 1)
        """
        nodes = line.strip().split()  # 按空格拆分出两个节点
        if len(nodes) == 2:
            left_node, right_node = nodes
            # 左节点：左边计数为1，右边计数为0
            yield left_node, (1, 0)
            # 右节点：左边计数为0，右边计数为1
            yield right_node, (0, 1)

    def combiner_sum_counts(self, node, counts):
        """
        Combiner: 在本地对相同节点的计数进行聚合。
        输入：[(1, 0), (0, 1), ...]
        输出：node -> (left_sum, right_sum)
        """
        left_sum, right_sum = 0, 0
        for left, right in counts:
            left_sum += left
            right_sum += right
        yield node, (left_sum, right_sum)

    def reducer_sum_counts(self, node, counts):
        """
        Reducer: 在全局范围内聚合相同节点的计数。
        输入：[(left_sum1, right_sum1), (left_sum2, right_sum2), ...]
        输出：node -> (left_total, right_total)
        """
        left_total, right_total = 0, 0
        for left, right in counts:
            left_total += left
            right_total += right
        yield node, (left_total, right_total)

    def reducer_filter_min_3(self, node, counts):
        """
        Reducer: 过滤出总次数 >= 3 的节点。
        输入：node -> (left_total, right_total)
        输出：node -> [left_total, right_total]
        """
        left_total, right_total = counts
        total_count = left_total + right_total
        if total_count >= 3:  # 总次数 >= 3 才输出
            yield node, [left_total, right_total]


if __name__ == "__main__":
    NodeAppearanceCount.run()
