from mrjob.job import MRJob

class NodeAppearanceCount(MRJob):

    def mapper(self, _, line):
        """
        Mapper: 读取边 (node1 node2)，输出每个节点及其计数。
        左节点 -> (1, 0)，表示左边计数+1，右边计数为0。
        右节点 -> (0, 1)，表示左边计数为0，右边计数+1。
        """
        nodes = line.strip().split()  # 按空格拆分行
        if len(nodes) == 2:  # 确保行合法
            left_node, right_node = nodes
            yield left_node, (1, 0)  # 左节点出现一次
            yield right_node, (0, 1)  # 右节点出现一次

    def combiner(self, node, counts):
        """
        Combiner: 对 Mapper 输出进行本地聚合，减少网络传输量。
        将 (1, 0) 和 (0, 1) 累加为 (left_sum, right_sum)。
        """
        left_sum, right_sum = 0, 0
        for left, right in counts:
            left_sum += left
            right_sum += right
        yield node, (left_sum, right_sum)

    def reducer(self, node, counts):
        """
        Reducer: 对 Combiner 输出进行全局聚合，并过滤掉总次数小于3的节点。
        输出满足条件的节点及其左边和右边的计数。
        """
        left_total, right_total = 0, 0
        for left, right in counts:
            left_total += left
            right_total += right

        total_count = left_total + right_total  # 计算总次数
        if total_count >= 3:  # 过滤条件：总次数 >= 3
            yield node, (left_total, right_total)


if __name__ == "__main__":
    NodeAppearanceCount.run()
